{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialogItemBlock","nav","to","name","Message","isYou","youStyle","theyStyle","alt","src","img","textMessage","message","AddMessageForm","addNewMessageAC","schema","yup","shape","message_area","required","useForm","resolver","yupResolver","handleSubmit","control","formState","errors","isSubmitSuccessful","reset","useEffect","style","textAlign","width","onSubmit","data","FormGroup","render","field","TextField","label","type","margin","error","defaultValue","Button","variant","compose","withRouter","connect","state","dialogs","dialogsPage","messages","isAuth","auth","withAuthRedirect","dialogElements","map","d","messageElements","m","Grid","container","dialogsBlock","item","xs","dialogsItems","dialogsContent","typeAndSend"],"mappings":"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","file":"static/js/4.db493be3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsBlock\":\"Dialogs_dialogsBlock__g3oHU\",\"dialogsItems\":\"Dialogs_dialogsItems__3Sl67\",\"dialogsContent\":\"Dialogs_dialogsContent__2UK_r\",\"messages\":\"Dialogs_messages__2uSEX\",\"typeAndSend\":\"Dialogs_typeAndSend__3itmK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItemBlock\":\"DialogItem_dialogItemBlock__3uHkC\",\"nav\":\"DialogItem_nav__O88GV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"youStyle\":\"Message_youStyle__2ecPc\",\"theyStyle\":\"Message_theyStyle__2v_8Y\",\"textMessage\":\"Message_textMessage__1dBKY\"};","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = { name: string; id: string}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = `${'/dialogs/'} ${props.id}`\r\n    return (\r\n        <div className={s.dialogItemBlock}>\r\n            <NavLink className={s.nav} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessagePropsType = { message: string; img: string; isYou: boolean }\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={props.isYou ? s.youStyle : s.theyStyle}>\r\n            <img alt=\"\" src={props.img}/>\r\n            <p className={s.textMessage}>{props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../bll/dialogReducer\";\r\nimport * as yup from \"yup\";\r\nimport {Controller, SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\ntype PropsType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n    isAuth: boolean\r\n    addNewMessageAC: (textForMessageInDialog: string) => void\r\n}\r\n\r\nexport const Dialogs = ({addNewMessageAC, dialogs, messages, ...props}: PropsType) => {\r\n    let dialogElements = dialogs.map((d) => <DialogItem name={d.name} key={d.id}\r\n                                                        id={d.id}/>)\r\n    let messageElements = messages.map(m => <Message message={m.message} img={m.img}\r\n                                                     isYou={m.isYou}\r\n                                                     key={m.id}/>)\r\n\r\n\r\n    return (\r\n        <Grid container className={s.dialogsBlock}>\r\n            <Grid item xs={2} className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </Grid>\r\n            <Grid item container xs={10} className={s.dialogsContent}>\r\n                <Grid item xs={12} className={s.messages}>\r\n                    {messageElements}\r\n                </Grid>\r\n                <Grid item xs={12} className={s.typeAndSend}>\r\n                    <AddMessageForm addNewMessageAC={addNewMessageAC}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// NEW COMPONENT\r\ntype AddPostFormPropsType = {\r\n    addNewMessageAC: (textForMessageInDialog: string) => void\r\n}\r\ntype IFormInputs = {\r\n    'message_area': string\r\n}\r\n\r\nexport const AddMessageForm = ({addNewMessageAC, ...props}: AddPostFormPropsType) => {\r\n\r\n    const schema = yup.object().shape({\r\n        message_area: yup.string().required(\"Required\"),\r\n    })\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: {errors, isSubmitSuccessful},\r\n        reset\r\n    } = useForm<IFormInputs>({resolver: yupResolver(schema)})\r\n\r\n    useEffect(() => {\r\n        reset({message_area: ''})\r\n    }, [isSubmitSuccessful, reset])\r\n\r\n    const formSubmitHandler: SubmitHandler<any> = (data: IFormInputs) => {\r\n        addNewMessageAC(data.message_area)\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: \"center\", width: '100%'}}>\r\n            <form onSubmit={handleSubmit(formSubmitHandler)}>\r\n                <FormGroup>\r\n                    <Controller name={'message_area'} control={control}\r\n                                render={({field}) => (\r\n                                    <TextField {...field} label=\"Type your message here\"\r\n                                               type='text'\r\n                                               margin=\"normal\"\r\n                                               error={!!errors.message_area}\r\n                                               defaultValue=\"\"\r\n                                    />\r\n                                )}/>\r\n                    <Button style={{width: '100%'}} type='submit'\r\n                            variant={\"contained\"}>Send</Button>\r\n                </FormGroup>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../bll/redux-store\";\r\nimport React from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {\r\n    addNewMessageAC, DialogType, MessageType\r\n} from \"../../bll/dialogReducer\";\r\n\r\ntype MapStatePropsType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    addNewMessageAC: (textForMessageInDialog: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {addNewMessageAC}),\r\n    withAuthRedirect,\r\n)(Dialogs)"],"sourceRoot":""}