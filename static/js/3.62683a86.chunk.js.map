{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/ProfileInfo/ProfileDataForm.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/Profile.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/PrifleData.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/Post/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","updateStatusTC","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","doubleClickDirection","onDoubleClickStatus","onDoubleClick","Input","autoFocus","onBlur","value","onChange","e","currentTarget","ProfileDataForm","profile","useForm","defaultValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","handleSubmit","control","dispatch","useDispatch","onSubmit","data","a","console","log","saveProfileTC","profileDataForm","button","variant","onClick","name","render","field","Checkbox","TextField","contacts","Object","keys","map","key","ProfileData","isOwner","goToEditMode","profileInfo","Button","entries","contactTitle","contactValue","ProfileInfo","inputFileRef","useRef","profileInfoBlock","mainPhoto","alt","src","photos","large","uploadImageButton","ref","type","accept","target","files","length","savePhotoTC","style","display","color","endIcon","AttachFile","size","downloadButton","current","click","Contact","contact","Post","post","message","likes","likesCount","AddPostForm","addPostAC","schema","yup","shape","post_area","required","resolver","yupResolver","formState","errors","isSubmitSuccessful","reset","FormGroup","maxWidth","alignItems","label","margin","error","width","compose","connect","state","posts","profilePage","postsElements","p","id","postsBlock","Profile","profileBlock","MyPostsContainer","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","React","Component","isAuth","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.62683a86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__32KEh\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1-qw1\",\"uploadImageButton\":\"ProfileInfo_uploadImageButton__2oJKA\",\"profileInfo\":\"ProfileInfo_profileInfo__SBRv9\",\"button\":\"ProfileInfo_button__ThD7_\",\"doubleClickDirection\":\"ProfileInfo_doubleClickDirection__2TCxP\",\"onDoubleClickStatus\":\"ProfileInfo_onDoubleClickStatus__2uXjc\",\"contacts\":\"ProfileInfo_contacts__2yYTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDataForm\":\"ProfileDataForm_profileDataForm__pWK4H\",\"button\":\"ProfileDataForm_button__2Byhc\",\"contact\":\"ProfileDataForm_contact__Ilc8I\",\"contacts\":\"ProfileDataForm_contacts__296m8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__17Zph\",\"posts\":\"MyPosts_posts__3-KB6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1IpN2\",\"likes\":\"Post_likes__3jNMT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"Profile_profileBlock__3dOJZ\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Input} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    status: string, updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport function ProfileStatusWithHooks({updateStatusTC, ...props}: PropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n\r\n            setStatus(props.status)\r\n        }, [props.status]\r\n    )\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n        updateStatusTC(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (<>\r\n        {!editMode &&\r\n        <div >\r\n                    <div className={s.doubleClickDirection}>Double click to edit status</div>\r\n\r\n            <span className={s.onDoubleClickStatus} onDoubleClick={activateMode}>\r\n               {status || '---'}\r\n            </span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <div>\r\n            <Input\r\n                autoFocus={true}\r\n                onBlur={deactivateMode}\r\n                value={status}\r\n                onChange={onStatusChange}/>\r\n        </div>\r\n        }\r\n    </>)\r\n}\r\n","import s from './ProfileDataForm.module.css'\r\nimport React from \"react\";\r\nimport {\r\n    ContactsPropsType,\r\n    ProfileType,\r\n    saveProfileTC\r\n} from \"../../../bll/profileReducer\";\r\nimport {Controller, SubmitHandler, useForm} from \"react-hook-form\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@mui/material/Input\";\r\nimport {Checkbox, TextField} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType | null\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport type FormInputs = {\r\n    fullName: string | null;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string | null;\r\n    aboutMe: string\r\n};\r\n\r\nexport const ProfileDataForm = ({profile, setEditMode}: ProfileDataFormType) => {\r\n\r\n\r\n    const {\r\n        handleSubmit,\r\n        control\r\n    } = useForm <FormInputs & any>(\r\n        {\r\n            defaultValues: {\r\n                fullName: profile?.fullName,\r\n                lookingForAJob: profile?.lookingForAJob,\r\n                lookingForAJobDescription: profile?.lookingForAJobDescription,\r\n                aboutMe: profile?.aboutMe\r\n            }\r\n        }\r\n    )\r\n\r\n    const dispatch = useDispatch()\r\n    const onSubmit: SubmitHandler<FormInputs> = async (data: FormInputs) => {\r\n        console.log('submit')\r\n        setEditMode(false)\r\n        await dispatch(saveProfileTC(data))\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileDataForm}>\r\n            <div>\r\n                <div className={s.button}><Button variant='contained'\r\n                             onClick={handleSubmit(onSubmit)}>Save</Button></div>\r\n                <div>\r\n                    <label>Full Name</label>\r\n                    <Controller name=\"fullName\" control={control}\r\n                                render={({field}) => <Input {...field} />}/>\r\n                </div>\r\n                <div>\r\n                    <label>Looking for a job</label>\r\n                    <Controller name=\"lookingForAJob\" control={control}\r\n                                render={({field}) => <Checkbox {...field} />}/>\r\n                </div>\r\n                <div>\r\n                    <label>My professional skills</label>\r\n                    <Controller name=\"lookingForAJobDescription\" control={control}\r\n                                render={({field}) => <TextField {...field} />}/>\r\n                </div>\r\n                <div>\r\n                    <label>About me</label>\r\n                    <Controller name=\"aboutMe\" control={control}\r\n                                render={({field}) => <TextField {...field} />}/>\r\n                </div>\r\n                <div className={s.contacts}>\r\n                    <label>Contacts</label>: {profile?.contacts && Object.keys(profile?.contacts).map(key => {\r\n                    return <div className={s.contacts}>\r\n                        <b>{key} : <Controller name={key} control={control}\r\n                                                    render={({field}) =>\r\n                                                        <Input {...field} />}/></b>\r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {ProfileType} from \"../../../bll/profileReducer\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Button from \"@mui/material/Button\";\r\nimport React from \"react\";\r\nimport {Contact} from \"./ProfileInfo\";\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType | null\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            {isOwner &&\r\n            <div className={s.button}><Button onClick={goToEditMode} variant='contained'>Edit</Button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile?.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b> : {profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {profile?.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile?.aboutMe}\r\n            </div>\r\n            <div className={s.contacts}>\r\n                <b>Contacts:</b> {profile?.contacts && Object.entries(profile?.contacts).map(value => {\r\n                return value[0] && <Contact key={value[0]} contactTitle={value[0]}\r\n                                            contactValue={value[1]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType, savePhotoTC} from \"../../../bll/profileReducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {AttachFile} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport {ProfileData} from \"./PrifleData\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: File) => void\r\n    saveProfileTC: (profile:  Omit<ProfileType, \"photos\">) => void\r\n}\r\n\r\nexport const ProfileInfo = ({\r\n                                profile,\r\n                                updateStatusTC,\r\n                                status,\r\n                                isOwner,\r\n                                saveProfileTC\r\n                            }: ProfileInfoPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const inputFileRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onChangeAttachMainPhoto = (target: HTMLInputElement) => {\r\n        if (target.files && target.files.length) {\r\n            dispatch(savePhotoTC(target.files[0]))\r\n        }\r\n    }\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n\r\n\r\n    // if (!profile) {\r\n    //     return <Preloader/>\r\n    // }\r\n\r\n    return (<>\r\n            {profile &&\r\n            <div>\r\n                {/*<div className={s.background}>*/}\r\n                {/*    <img alt=\"background img\"*/}\r\n                {/*         src=\"https://www.pikpng.com/pngl/b/603-6034862_header-banner-png-banner-images-header-png-clipart.png\"/>*/}\r\n                {/*</div>*/}\r\n\r\n                <div className={s.profileInfoBlock}>\r\n                    <div>\r\n                        <img className={s.mainPhoto} alt='avatar'\r\n                             src={profile.photos?.large || 'https://www.nicepng.com/png/detail/914-9142519_doge-meme-dog-doggo-funny-sticker-momo-png.png'}/>\r\n                        {isOwner &&\r\n                        <div className={s.uploadImageButton}>\r\n                            <input ref={inputFileRef}\r\n                                   type='file'\r\n                                   accept='.image/jpeg, .png, .jpg'\r\n                                   onChange={(e) => onChangeAttachMainPhoto(e.target)}\r\n                                   style={{display: 'none'}}/>\r\n                            <Button color='secondary' endIcon={<AttachFile/>} size='small'\r\n                                    className={s.downloadButton}\r\n                                    onClick={() => inputFileRef.current && inputFileRef.current.click()}>\r\n                                <span>Change avatar </span>\r\n                            </Button>\r\n                        </div>\r\n                        }\r\n\r\n                        {editMode ?\r\n                            <ProfileDataForm profile={profile} setEditMode={setEditMode}/> :\r\n                            <ProfileData profile={profile} isOwner={isOwner}\r\n                                         goToEditMode={goToEditMode}/>}\r\n\r\n                        <ProfileStatusWithHooks status={status}\r\n                                                updateStatusTC={updateStatusTC}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contact}><label>{contactTitle}</label> : {contactValue}</div>\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType =  {\r\n id?: string;\r\n message: string\r\n likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img alt='ava' src='https://i.pinimg.com/originals/f1/08/a3/f108a3f0a39c70b8f7e56c642edb9327.png'/>\r\n            { props.message }\r\n            <div>\r\n                <span className={s.likes}>likes: {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {postsObjectType} from \"../../../bll/profileReducer\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Controller, SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\n\r\ntype PropsType = {\r\n    posts: Array<postsObjectType>\r\n    addPostAC: (textForNewPost: string) => void\r\n\r\n}\r\n\r\nexport const MyPosts = ({posts, addPostAC}: PropsType) => {\r\n    const postsElements = posts.map(p => <Post key={p.id} message={p.message}\r\n                                               likesCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <AddPostForm addPostAC={addPostAC}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n// N E W   C O M P O N E N T\r\n\r\ntype AddPostFormPropsType = {\r\n    addPostAC: (textForNewPost: string) => void\r\n}\r\ntype IFormInputs = {\r\n    'post_area': string\r\n}\r\n\r\nexport const AddPostForm = ({addPostAC}: AddPostFormPropsType) => {\r\n\r\n    const schema = yup.object().shape({\r\n        post_area: yup.string().required(\"Required\"),\r\n    })\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: {errors, isSubmitSuccessful},\r\n        reset\r\n    } = useForm<IFormInputs>({resolver: yupResolver(schema)})\r\n\r\n    useEffect(() => {\r\n        reset({post_area: ''})\r\n    }, [isSubmitSuccessful, reset])\r\n\r\n    const formSubmitHandler: SubmitHandler<any> = (data: IFormInputs) => {\r\n        addPostAC(data.post_area)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormGroup style={{maxWidth: '300px', display: \"flex\", alignItems: \"center\"}}>\r\n                <Controller name={'post_area'} control={control}\r\n                            render={({field}) => (\r\n                                <TextField {...field} label=\"Type your post here\"\r\n                                           type='text'\r\n                                           margin=\"normal\"\r\n                                           error={!!errors.post_area}\r\n\r\n                                />)}/>\r\n                <Button style={{width: '50%'}} variant={\"contained\"} onClick={handleSubmit(formSubmitHandler)}>Add\r\n                    post</Button>\r\n            </FormGroup>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {MyPosts} from \"../MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../bll/redux-store\";\r\nimport {addPostAC, postsObjectType} from \"../../../../bll/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapDispatchPropsType = {\r\n    addPostAC: (textForNewPost: string) => void\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<postsObjectType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        addPostAC\r\n    })\r\n)(MyPosts);\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../bll/profileReducer\";\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\nimport s from './Profile.module.css'\r\n\r\ntype ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: File) => void\r\n    saveProfileTC: (profile: Omit<ProfileType, \"photos\">) => void\r\n}\r\n\r\nexport const Profile = ({\r\n                            profile,\r\n                            status,\r\n                            updateStatusTC,\r\n                            isOwner,\r\n                            savePhotoTC,\r\n                            saveProfileTC\r\n                        }: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <ProfileInfo isOwner={isOwner}\r\n                         profile={profile}\r\n                         status={status}\r\n                         updateStatusTC={updateStatusTC}\r\n                         savePhotoTC={savePhotoTC}\r\n                         saveProfileTC={saveProfileTC}\r\n\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileType, savePhotoTC, saveProfileTC,\r\n    updateStatusTC\r\n} from \"../../bll/profileReducer\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = { //эти типы приходят из withRouter\r\n    userId: string\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC:(file: File) => void\r\n    saveProfileTC:(profile: Omit<ProfileType, \"photos\">) => void\r\n}\r\ntype ProfileContainerPropsType =\r\n    MapStatePropsType\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>   // в RouteComponentProps закидываем наши типы\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}\r\n                         savePhotoTC={this.props.savePhotoTC}\r\n                         saveProfileTC={this.props.saveProfileTC}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC, savePhotoTC, saveProfileTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}